from services.chat_service import (
    create_session_service,
    send_message_service,
    get_history_chat_service,
    get_all_history_chat_service,
    send_message_page_service,
    update_chat_session,
    delete_chat_session,
    delete_message,
    check_session_service,
    update_tag_chat_session,
    get_all_customer_service,
    sendMessage
)
from services.llm_service import (get_all_llms_service)
from fastapi import WebSocket
from datetime import datetime
from models.chat import CustomerInfo
import requests
from config.websocket_manager import ConnectionManager
import datetime
import json
from llm.llm import RAGModel
manager = ConnectionManager()
from config.database import SessionLocal


def create_session_controller():
    chat = create_session_service()    
    return {
        "id": chat
    }

def check_session_controller(sessionId ):
    chat = check_session_service(sessionId)    
    return {
        "id": chat
    }
from google.oauth2.service_account import Credentials
import gspread

creds = Credentials.from_service_account_file(
    "config/config_sheet.json",  # file service account JSON t·∫£i t·ª´ Google Cloud
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
client = gspread.authorize(creds)

spreadsheet_id = "1eci4KfF4VNQop9j63mnaKys1N3g3gJ3bdWpsgEE4wJs"
sheet = client.open_by_key(spreadsheet_id).sheet1    



def add_customer(customer_data: dict):

    # L·∫•y ti√™u ƒë·ªÅ c·ªôt hi·ªán c√≥
    headers = sheet.row_values(1)

    # T·∫°o mapping JSON key -> header
    key_to_header = {
        "submit" : "Ng√†y submit",
        "name": "H·ªç t√™n",
        "phone": "S·ªë ƒëi·ªán tho·∫°i",
        "email": "Email",
        "address": "ƒê·ªãa ch·ªâ", 
        "class" : "Kho√° h·ªçc c·∫ßn ƒëƒÉng k√Ω",
        "registration" : "C∆° s·ªü ƒëƒÉng k√Ω h·ªçc"
    }

    # Chu·∫©n b·ªã row theo th·ª© t·ª± header sheet
    row = []
    for h in headers:
        # t√¨m key t∆∞∆°ng ·ª©ng trong JSON
        key = next((k for k, v in key_to_header.items() if v == h), None)
        value = str(customer_data.get(key, "")) if key else ""
        row.append(value if value != "None" else "") 

    # Th√™m v√†o cu·ªëi sheet
    
    current_row_count = len(sheet.get_all_values())
    sheet.insert_row(row, index=current_row_count + 1)
    
    print("Th√™m kh√°ch h√†ng v√†o Google Sheets th√†nh c√¥ng.")


async def sendMessage_controller(data: dict):
    try:
        message = sendMessage(data, data.get("content"))
        for msg in message:
                print(msg)
                await manager.broadcast_to_admins(msg)
                print("send1")
                await manager.send_to_customer(msg["chat_session_id"], msg)
                print("send2")

        return {"status": "success", "data": message}
    except Exception as e:
        print(e)
















async def customer_chat(websocket: WebSocket, session_id: int):
    print(session_id)
    await manager.connect_customer(websocket, session_id)
    db = SessionLocal()
    
    try:
        while True:
            data = await websocket.receive_json()
            print(data)

            # L∆∞u tin nh·∫Øn customer v√†o DB
            res_messages = send_message_service(data, user=None)
            print(res_messages)

            for msg in res_messages:
                print(msg)
                await manager.broadcast_to_admins(msg)
                print("send1")
                await manager.send_to_customer(session_id, msg)
                print("send2")

            # Thu th·∫≠p th√¥ng tin kh√°ch h√†ng sau M·ªñI tin nh·∫Øn
            try:
                rag = RAGModel()
                extracted_info = rag.extract_customer_info_realtime(session_id, limit_messages=15)
                
                if extracted_info:
                    customer_data = json.loads(extracted_info)
                    
                    # Ki·ªÉm tra xem ƒë√£ c√≥ th√¥ng tin kh√°ch h√†ng n√†y ch∆∞a
                    existing_customer = db.query(CustomerInfo).filter(
                        CustomerInfo.chat_session_id == session_id
                    ).first()
                    
                    if existing_customer:
                        # C·∫≠p nh·∫≠t th√¥ng tin hi·ªán c√≥ v·ªõi th√¥ng tin m·ªõi
                        existing_data = existing_customer.customer_data or {}
                        
                        # Merge data: ∆∞u ti√™n th√¥ng tin m·ªõi n·∫øu kh√¥ng null
                        updated_data = existing_data.copy()
                        for key, value in customer_data.items():
                            if value is not None and value != "" and value != "null":
                                updated_data[key] = value
                        
                        existing_customer.customer_data = updated_data
                        print(f"üìù C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng {session_id}: {updated_data}")
                    else:
                        # T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
                        # Ch·ªâ t·∫°o m·ªõi n·∫øu c√≥ √≠t nh·∫•t m·ªôt th√¥ng tin h·ªØu √≠ch
                        has_useful_info = any(
                            v is not None and v != "" and v != "null" and v is not False 
                            for v in customer_data.values()
                        )
                        
                        if has_useful_info:
                            customer = CustomerInfo(
                                chat_session_id=session_id,
                                customer_data=customer_data
                            )
                            db.add(customer)
                            print(f"üÜï T·∫°o m·ªõi th√¥ng tin kh√°ch h√†ng {session_id}: {customer_data}")
                    
                    db.commit()
                    
                    # G·ª≠i th√¥ng tin c·∫≠p nh·∫≠t ƒë·∫øn admin
                    customer_update = {
                        "chat_session_id": session_id,
                        "customer_data": existing_customer.customer_data if existing_customer else customer_data,
                        "type": "customer_info_update"
                    }
                    await manager.broadcast_to_admins(customer_update)
                    
            except Exception as extract_error:
                print(f"L·ªói khi tr√≠ch xu·∫•t th√¥ng tin: {extract_error}")

            # X·ª≠ l√Ω ch·ªët ƒë∆°n (khi bot n√≥i "em ƒë√£ ghi nh·∫≠n th√¥ng tin")
            if len(res_messages) > 1:
                bot_reply = res_messages[1].get("content", "")
                
                if "em ƒë√£ ghi nh·∫≠n th√¥ng tin" in bot_reply.lower():
                    try:
                        # L·∫•y th√¥ng tin customer ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                        final_customer = db.query(CustomerInfo).filter(
                            CustomerInfo.chat_session_id == session_id
                        ).first()
                        
                        if final_customer and final_customer.customer_data:
                            # Th√™m v√†o Google Sheets
                            add_customer(final_customer.customer_data)
                            
                            # Th√¥ng b√°o ch·ªët ƒë∆°n th√†nh c√¥ng
                            order_complete = {
                                "chat_session_id": session_id,
                                "customer_data": final_customer.customer_data,
                                "type": "order_completed"
                            }
                            await manager.broadcast_to_admins(order_complete)
                            print(f"‚úÖ ƒê√£ ch·ªët ƒë∆°n th√†nh c√¥ng cho kh√°ch h√†ng {session_id}")
                            
                    except Exception as order_error:
                        print(f"L·ªói khi x·ª≠ l√Ω ch·ªët ƒë∆°n: {order_error}")

    except Exception as e:
        print(f"L·ªói trong customer_chat: {e}")
        manager.disconnect_customer(websocket, session_id)

    finally:
        db.close()

async def admin_chat(websocket: WebSocket, user: dict):
        # await manager.connect(websocket)
        
        await manager.connect_admin(websocket)

        try:
            while True:
                
                
                data = await websocket.receive_json()
                
                
                # await manager.broadcast(f"Message customer: {data}")
                
                # L∆∞u tin nh·∫Øn admin v√†o DB
                res_messages = send_message_service(data, user)
                
                # # G·ª≠i ƒë·∫øn t·∫•t c·∫£ customer ƒëang k·∫øt n·ªëi (c√≥ th·ªÉ l·ªçc theo session_id n·∫øu c·∫ßn)
                for msg in res_messages:
                #     await manager.broadcast(msg)
                    await manager.send_to_customer(msg["chat_session_id"], msg)
                    await manager.broadcast_to_admins(msg)
                    
                    print("G·ª≠i")
                        

        except Exception:
            manager.disconnect_admin(websocket)
            
       
async def handle_send_message(websocket: WebSocket, data : dict, user):
    message = send_message_service(websocket, data, user)
    
    # g·ª≠i realtime cho client
    return message
    
def get_history_chat_controller(chat_session_id: int):
    messages = get_history_chat_service(chat_session_id)
    return messages


def get_all_history_chat_controller():
    messages = get_all_history_chat_service()
    return messages
    
def get_all_customer_controller(data: dict):
    customers = get_all_customer_service(data)
    return customers


async def update_chat_session_controller(id: int, data: dict, user):
    chatSession = update_chat_session(id, data, user)
    if not chatSession:
        return {"message": "Not Found"}
    
    
    await manager.broadcast_to_admins(chatSession)
    
    return chatSession

async def update_tag_chat_session_controller(id: int, data: dict):
    chatSession = update_tag_chat_session(id, data)
    if not chatSession:
        return {"message": "Not Found"}

    return chatSession

def parse_telegram(body: dict):
    print("ok")
    msg = body.get("message", {})
    sender_id = msg.get("from", {}).get("id")
    text = msg.get("text", "")
    
    # Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i tin nh·∫Øn text
    if not text:
        # Ki·ªÉm tra c√°c lo·∫°i tin nh·∫Øn kh√°c (photo, video, document, etc.)
        text = "Hi·ªán t·∫°i h·ªá th·ªëng ch·ªâ h·ªó tr·ª£ tin nh·∫Øn d·∫°ng text. Vui l√≤ng g·ª≠i l·∫°i tin nh·∫Øn b·∫±ng vƒÉn b·∫£n."
            

    return {
        "platform": "telegram",
        "sender_id": sender_id,
        "message": text  
    }
    

def parse_facebook(body: dict):
    entry = body.get("entry", [])[0]
    page_id = entry.get("id")

    messaging_event = entry.get("messaging", [])[0]
    sender_id = messaging_event["sender"]["id"]
    timestamp = messaging_event.get("timestamp")

    timestamp_str = datetime.datetime.fromtimestamp(timestamp/1000).strftime("%Y-%m-%d %H:%M:%S")

    message = messaging_event.get("message", {})
    message_text = message.get("text", "")
    
    # Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i tin nh·∫Øn text
    if not message_text:
        message_text = "Hi·ªán t·∫°i h·ªá th·ªëng ch·ªâ h·ªó tr·ª£ tin nh·∫Øn d·∫°ng text. Vui l√≤ng g·ª≠i l·∫°i tin nh·∫Øn b·∫±ng vƒÉn b·∫£n."


    return {
        "platform": "facebook",
        "page_id": page_id,
        "sender_id": sender_id,
        "message": message_text,
        "timestamp": timestamp_str
    }


def parse_zalo(body: dict):
    event_name = body.get("event_name")
    sender_id = None
    text = None

    if event_name == "user_send_text":
        sender_id = body["sender"]["id"]
        text = body["message"]["text"]
    else:
        # X·ª≠ l√Ω c√°c lo·∫°i tin nh·∫Øn kh√¥ng ph·∫£i text
        sender_id = body["sender"]["id"]
        text = "Hi·ªán t·∫°i h·ªá th·ªëng ch·ªâ h·ªó tr·ª£ tin nh·∫Øn d·∫°ng text. Vui l√≤ng g·ª≠i l·∫°i tin nh·∫Øn b·∫±ng vƒÉn b·∫£n."
        

    return {
        "platform": "zalo",
        "sender_id": sender_id,
        "message": text
    }

async def chat_platform(channel, body: dict):
    
    
    data = None
    
    if channel == "tele":
        data = parse_telegram(body)
        print("ok")
    
    elif channel == "fb":
        data = parse_facebook(body)
     
    elif channel == "zalo":
        data = parse_zalo(body)
        
        
     
    message = send_message_page_service(data)   
    
    db = SessionLocal()
    
    try:
        for msg in message:
            await manager.broadcast_to_admins(msg)
        
        # Thu th·∫≠p th√¥ng tin kh√°ch h√†ng sau M·ªñI tin nh·∫Øn t·ª´ platform
        if message:
            session_id = message[0].get("chat_session_id")
            
            try:
                rag = RAGModel()
                extracted_info = rag.extract_customer_info_realtime(session_id, limit_messages=15)
                
                if extracted_info:
                    customer_data = json.loads(extracted_info)
                    
                    # Ki·ªÉm tra xem ƒë√£ c√≥ th√¥ng tin kh√°ch h√†ng n√†y ch∆∞a
                    existing_customer = db.query(CustomerInfo).filter(
                        CustomerInfo.chat_session_id == session_id
                    ).first()
                    
                    if existing_customer:
                        # C·∫≠p nh·∫≠t th√¥ng tin hi·ªán c√≥ v·ªõi th√¥ng tin m·ªõi
                        existing_data = existing_customer.customer_data or {}
                        
                        # Merge data: ∆∞u ti√™n th√¥ng tin m·ªõi n·∫øu kh√¥ng null
                        updated_data = existing_data.copy()
                        for key, value in customer_data.items():
                            if value is not None and value != "" and value != "null":
                                updated_data[key] = value
                        
                        existing_customer.customer_data = updated_data
                        print(f"üìù C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng {session_id}: {updated_data}")
                    else:
                        # T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
                        # Ch·ªâ t·∫°o m·ªõi n·∫øu c√≥ √≠t nh·∫•t m·ªôt th√¥ng tin h·ªØu √≠ch
                        has_useful_info = any(
                            v is not None and v != "" and v != "null" and v is not False 
                            for v in customer_data.values()
                        )
                        
                        if has_useful_info:
                            customer = CustomerInfo(
                                chat_session_id=session_id,
                                customer_data=customer_data
                            )
                            db.add(customer)
                            print(f"üÜï T·∫°o m·ªõi th√¥ng tin kh√°ch h√†ng {session_id}: {customer_data}")
                    
                    db.commit()
                    
                    # G·ª≠i th√¥ng tin c·∫≠p nh·∫≠t ƒë·∫øn admin
                    customer_update = {
                        "chat_session_id": session_id,
                        "customer_data": existing_customer.customer_data if existing_customer else customer_data,
                        "type": "customer_info_update"
                    }
                    await manager.broadcast_to_admins(customer_update)
                    
            except Exception as extract_error:
                print(f"L·ªói khi tr√≠ch xu·∫•t th√¥ng tin: {extract_error}")
    
    finally:
        db.close()

def delete_chat_session_controller(ids: list[int]):
    deleted_count = delete_chat_session(ids)   # g·ªçi xu·ªëng service
    return {
        "deleted": deleted_count,
        "ids": ids
    }

def delete_message_controller(chatId: int, ids: list[int]):
    deleted_count = delete_message(chatId, ids)   # g·ªçi xu·ªëng service
    return {
        "deleted": deleted_count,
        "ids": ids
    }