import React, { useEffect, useState } from 'react'
import { Settings, MessageSquare, Database, Users, TestTube, BarChart3, Bell, FileSpreadsheet, Bot, Key, UserCheck, Search, Facebook, MessageCircle } from 'lucide-react';
import { getUsers } from '../../services/userService';
import { useNavigate } from "react-router-dom";
import { get_llm_by_id } from "../../services/llmService";
import { getKnowledgeById } from "../../services/knowledgeService";
import { getAllChatHistory } from "../../services/messengerService";
export const Dashboard = () => {
    const [data, setData] = useState([]);
    const [bot, setBot] = useState();
    const [knowledgeService, setKnowledgeService] = useState();
    const [chat, setChat] = useState();
    const [loading, setLoading] = useState(true);
    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);

            const [users, chatbot, knowledge, historyChat] = await Promise.all([
                getUsers(),
                get_llm_by_id(1),
                getKnowledgeById(1),
                getAllChatHistory()
            ]);

            setData(users);
            setBot(chatbot);
            setKnowledgeService(knowledge);
            setChat(historyChat);

            setLoading(false);
        };
        fetchData();
    }, []);

    const isConfigured = bot?.key && bot?.name && bot?.prompt && bot?.system_greeting
    const isKnowledgeService = knowledgeService?.source && knowledgeService?.content && knowledgeService.title
    const navigate = useNavigate();
    const statusCards = [
        isConfigured
            ? {
                title: 'C·∫•u h√¨nh chatbot',
                subtitle: 'Chatbot',
                status: 'ƒê√£ c·∫•u h√¨nh',
                statusColor: 'text-green-600',
                icon: <Bot className="w-6 h-6 text-green-600" />,
                bgColor: 'bg-green-50',
                borderColor: 'border-green-200',
                path: "/dashboard/cau-hinh-he-thong",
                cardStatus: "C·∫•u h√¨nh ho√†n t·∫•t v√† ƒëang ho·∫°t ƒë·ªông"
            }
            : {
                title: 'C·∫•u h√¨nh chatbot',
                subtitle: 'Ch∆∞a ho√†n th√†nh',
                status: 'Ch∆∞a ho√†n th√†nh',
                statusColor: 'text-red-600',
                icon: <Bot className="w-6 h-6 text-red-600" />,
                bgColor: 'bg-red-50',
                borderColor: 'border-red-200',
                path: "/dashboard/cau-hinh-he-thong",
                cardStatus: "C·∫•u h√¨nh ch∆∞a ho√†n t·∫•t"
            },
        isKnowledgeService ?
            {
                title: 'D·ªØ li·ªáu t∆∞ v·∫•n',
                subtitle: 'Google Sheets',
                status: 'ƒê√£ c·∫•u h√¨nh',
                statusColor: 'text-green-600',
                icon: <FileSpreadsheet className="w-6 h-6 text-green-600" />,
                bgColor: 'bg-green-50',
                borderColor: 'border-green-200',
                path: "/dashboard/cau-hinh-kien-thuc",
                cardStatus: "C·∫•u h√¨nh ho√†n t·∫•t v√† ƒëang ho·∫°t ƒë·ªông"
            }
            : {
                title: 'D·ªØ li·ªáu t∆∞ v·∫•n',
                subtitle: 'Google Sheets',
                status: 'Ch∆∞a ho√†n th√†nh',
                statusColor: 'text-red-600',
                icon: <FileSpreadsheet className="w-6 h-6 text-red-600" />,
                bgColor: 'bg-red-50',
                borderColor: 'border-red-200',
                path: "/dashboard/cau-hinh-kien-thuc",
                cardStatus: "C·∫•u h√¨nh ch∆∞a ho√†n t·∫•t"
            },
        {
            title: 'K·∫øt qu·∫£ t√¨m ki·∫øm',
            subtitle: 'Search',
            status: 'ƒê√£ c·∫•u h√¨nh',
            statusColor: 'text-green-600',
            icon: <Search className="w-6 h-6 text-green-600" />,
            bgColor: 'bg-green-50',
            borderColor: 'border-green-200',
            path: "/dashboard/searchResults",
            cardStatus: "C·∫•u h√¨nh ho√†n t·∫•t v√† ƒëang ho·∫°t ƒë·ªông"
        },
        {
            title: 'K√™nh Chat',
            subtitle: 'Facebook',
            status: 'ƒê√£ c·∫•u h√¨nh',
            statusColor: 'text-green-600',
            icon: <Facebook className="w-6 h-6 text-green-600" />,
            bgColor: 'bg-green-50',
            borderColor: 'border-green-200',
            path: "/admin/facebook_page",
            cardStatus: "C·∫•u h√¨nh ho√†n t·∫•t v√† ƒëang ho·∫°t ƒë·ªông"
        },
        {
            title: 'K√™nh Chat',
            subtitle: 'Zalo',
            status: 'ƒê√£ c·∫•u h√¨nh',
            statusColor: 'text-green-600',
            icon: <MessageSquare className="w-6 h-6 text-green-600" />,
            bgColor: 'bg-green-50',
            borderColor: 'border-green-200',
            path: "/admin/facebook_page",
            cardStatus: "C·∫•u h√¨nh ho√†n t·∫•t v√† ƒëang ho·∫°t ƒë·ªông"
        },
        {
            title: 'K√™nh Chat',
            subtitle: 'Telegram',
            status: 'ƒê√£ c·∫•u h√¨nh',
            statusColor: 'text-green-600',
            icon: <MessageCircle className="w-6 h-6 text-green-600" />,
            bgColor: 'bg-green-50',
            borderColor: 'border-green-200',
            path: "/admin/facebook_page",
            cardStatus: "C·∫•u h√¨nh ho√†n t·∫•t v√† ƒëang ho·∫°t ƒë·ªông"
        }
    ];

    const statsCards = [
        // {
        //     title: 'S·ªë doanh nghi·ªáp',
        //     value: '1',
        //     bgColor: 'bg-indigo-50',
        //     textColor: 'text-indigo-600',
        //     borderColor: 'border-indigo-200',
        //     icon: 'üè¢'
        // },
        {
            title: 'S·ªë ng∆∞·ªùi d√πng',
            value: data.length || 0,
            bgColor: 'bg-purple-50',
            textColor: 'text-purple-600',
            borderColor: 'border-purple-200',
            icon: 'üë•',
            path: '/admin/users'
        },
        {
            title: 'S·ªë cu·ªôc tr√≤ chuy·ªán',
            value: chat?.length || 0,
            bgColor: 'bg-indigo-50',
            textColor: 'text-indigo-600',
            borderColor: 'border-indigo-200',
            icon: 'üí¨',
            path: '/admin/chat'
        },
        // {
        //     title: 'Kh√°ch h√†ng ti·ªÅm nƒÉng',
        //     value: '324',
        //     bgColor: 'bg-indigo-50',
        //     textColor: 'text-indigo-600',
        //     borderColor: 'border-indigo-200',
        //     icon: 'üéØ'
        // },
    ];

    const setupSteps = [
        {
            step: 1,
            icon: <Settings className="w-5 h-5" />,
            title: 'C√†i ƒë·∫∑t c∆° b·∫£n',
            text: 'ƒêi·ªÅn th√¥ng tin c√¥ng ty v√† k·∫øt n·ªëi d·ªãch v·ª• c·∫ßn thi·∫øt',
            description: 'Thi·∫øt l·∫≠p th√¥ng tin doanh nghi·ªáp v√† c√°c t√†i kho·∫£n d·ªãch v·ª•',
            tasks: [
                'Nh·∫≠p t√™n c√¥ng ty, logo v√† th√¥ng tin li√™n h·ªá',
                'K·∫øt n·ªëi t√†i kho·∫£n Google (ƒë·ªÉ l∆∞u d·ªØ li·ªáu v√†o Google Sheets)',
                'Nh·∫≠p API key ChatGPT ho·∫∑c Claude (ƒë·ªÉ chatbot ho·∫°t ƒë·ªông)',
                'C√†i ƒë·∫∑t email nh·∫≠n th√¥ng b√°o khi c√≥ kh√°ch h√†ng m·ªõi',
                'Ch·ªçn m√∫i gi·ªù v√† ng√¥n ng·ªØ hi·ªÉn th·ªã'
            ],
        },
        {
            step: 2,
            icon: <Bot className="w-5 h-5" />,
            title: 'Thi·∫øt k·∫ø chatbot',
            text: 'T·∫°o t√≠nh c√°ch, l·ªùi ch√†o v√† c√°ch tr·∫£ l·ªùi c·ªßa chatbot',
            description: 'T√πy ch·ªânh h√†nh vi v√† phong c√°ch giao ti·∫øp ph√π h·ª£p v·ªõi th∆∞∆°ng hi·ªáu',
            tasks: [
                'Vi·∫øt l·ªùi ch√†o ƒë·∫ßu ti√™n c·ªßa chatbot',
                'M√¥ t·∫£ vai tr√≤ c·ªßa chatbot (t∆∞ v·∫•n vi√™n, h·ªó tr·ª£ kh√°ch h√†ng...)',
                'T·∫°o danh s√°ch c√¢u h·ªèi th∆∞·ªùng g·∫∑p v√† c√¢u tr·∫£ l·ªùi',
                'Thi·∫øt l·∫≠p tin nh·∫Øn khi kh√¥ng hi·ªÉu kh√°ch h√†ng',
                'Th√™m th√¥ng tin v·ªÅ s·∫£n ph·∫©m/d·ªãch v·ª• ƒë·ªÉ chatbot t∆∞ v·∫•n'
            ],
        },
        {
            step: 3,
            icon: <UserCheck className="w-5 h-5" />,
            title: 'Form thu th·∫≠p th√¥ng tin',
            text: 'Thi·∫øt k·∫ø form ƒë·ªÉ chatbot h·ªèi v√† l∆∞u th√¥ng tin kh√°ch h√†ng',
            description: 'Quy·∫øt ƒë·ªãnh th√¥ng tin n√†o c·∫ßn thu th·∫≠p t·ª´ kh√°ch h√†ng ti·ªÅm nƒÉng',
            tasks: [
                'Ch·ªçn th√¥ng tin c·∫ßn thu th·∫≠p (t√™n, s·ªë ƒëi·ªán tho·∫°i, email, nhu c·∫ßu...)',
                'Vi·∫øt c√¢u h·ªèi ƒë·ªÉ chatbot h·ªèi th√¥ng tin m·ªôt c√°ch t·ª± nhi√™n',
                'Thi·∫øt l·∫≠p th·ª© t·ª± h·ªèi th√¥ng tin (t√™n tr∆∞·ªõc, sau ƒë√≥ s·ªë ƒëi·ªán tho·∫°i...)',
                'T·∫°o tin nh·∫Øn c·∫£m ∆°n sau khi thu th·∫≠p xong th√¥ng tin',
                'Quy ƒë·ªãnh th√¥ng tin n√†o b·∫Øt bu·ªôc, th√¥ng tin n√†o t√πy ch·ªçn'
            ],
        },
        {
            step: 4,
            icon: <Database className="w-5 h-5" />,
            title: 'Qu·∫£n l√Ω kh√°ch h√†ng ti·ªÅm nƒÉng',
            text: 'C√†i ƒë·∫∑t c√°ch ph√¢n lo·∫°i v√† theo d√µi kh√°ch h√†ng',
            description: 'Thi·∫øt l·∫≠p h·ªá th·ªëng qu·∫£n l√Ω v√† ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng kh√°ch h√†ng',
            tasks: [
                'T·∫°o c√°c nh√£n ph√¢n lo·∫°i kh√°ch h√†ng (n√≥ng, ·∫•m, l·∫°nh)',
                'Thi·∫øt l·∫≠p ƒëi·ªÅu ki·ªán t·ª± ƒë·ªông g·∫Øn nh√£n d·ª±a v√†o c√¢u tr·∫£ l·ªùi',
                'C√†i ƒë·∫∑t th√¥ng b√°o khi c√≥ kh√°ch h√†ng ti·ªÅm nƒÉng ch·∫•t l∆∞·ª£ng cao',
                'K·∫øt n·ªëi v·ªõi Google Sheets ƒë·ªÉ xu·∫•t danh s√°ch kh√°ch h√†ng',
                'Thi·∫øt l·∫≠p t·ª± ƒë·ªông g·ª≠i email b√°o c√°o h√†ng tu·∫ßn'
            ],
        },
        {
            step: 5,
            icon: <Users className="w-5 h-5" />,
            title: 'Th√™m nh√¢n vi√™n',
            text: 'M·ªùi ƒë·ªìng nghi·ªáp v√† ph√¢n quy·ªÅn truy c·∫≠p h·ªá th·ªëng',
            description: 'T·∫°o t√†i kho·∫£n cho team v√† thi·∫øt l·∫≠p quy·ªÅn h·∫°n ph√π h·ª£p',
            tasks: [
                'M·ªùi nh√¢n vi√™n sales/marketing tham gia h·ªá th·ªëng',
                'Ph√¢n quy·ªÅn xem/ch·ªânh s·ª≠a d·ªØ li·ªáu kh√°ch h√†ng',
                'Thi·∫øt l·∫≠p ai nh·∫≠n th√¥ng b√°o khi c√≥ lead m·ªõi',
                'T·∫°o workspace ri√™ng cho t·ª´ng b·ªô ph·∫≠n',
                'H∆∞·ªõng d·∫´n nh√¢n vi√™n s·ª≠ d·ª•ng dashboard'
            ],
        }
    ];

    const completedSteps = setupSteps.filter(step => step.completed).length;
    const totalSteps = setupSteps.length;
    const progressPercentage = Math.round((completedSteps / totalSteps) * 100);
    return (

        <div className="flex-1 p-4 lg:p-6 bg-gray-50 min-h-screen overflow-auto">
            <div className="max-w-7xl mx-auto space-y-6">
                {/* Header */}
                <div>
                    <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-6">
                        <div>
                            <h1 className="text-2xl lg:text-3xl font-semibold text-gray-900 mb-1">
                                üöÄ T·ªïng quan h·ªá th·ªëng
                            </h1>
                            <p className="text-gray-600">
                                Tr·∫°ng th√°i c·∫•u h√¨nh v√† th·ªëng k√™ t·ªïng quan
                            </p>
                        </div>
                        <div className="flex items-center gap-2 bg-green-100 text-green-800 px-3 py-2 rounded-lg border border-green-200">
                            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                            <span className="font-medium">H·ªá th·ªëng ho·∫°t ƒë·ªông</span>
                        </div>
                    </div>
                </div>

                {/* Status Cards Grid */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {statusCards.map((card, index) => (
                        <div key={index} onClick={() => navigate(card.path)} className={`${card.bgColor} ${card.borderColor} border rounded-lg p-4 hover:bg-opacity-80 transition-colors cursor-pointer`}>
                            <div className="flex items-start justify-between mb-3">
                                <div className="flex items-center space-x-3">
                                    <div className="p-2 bg-white rounded-lg">
                                        {card.icon}
                                    </div>
                                    <div>
                                        <span className="text-sm font-medium text-gray-700">{card.title}</span>
                                    </div>
                                </div>
                                <div className={`flex items-center gap-1 text-xs px-2 py-1 rounded-full bg-green-100 ${card.statusColor} font-medium border border-green-300`}>
                                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                                    {card.status}
                                </div>
                            </div>
                            <h3 className="text-lg font-semibold text-gray-900 mb-1">{card.subtitle}</h3>
                            <div className="text-sm text-gray-600">
                                {card.cardStatus}
                            </div>
                        </div>
                    ))}
                </div>

                {/* Stats Cards */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {statsCards.map((stat, index) => (
                        <div key={index} className={`${stat.bgColor} ${stat.borderColor} border rounded-lg p-6 hover:bg-opacity-80 transition-colors cursor-pointer`}
                            onClick={() => navigate(`${stat.path}`)}>
                            <div className="flex items-center justify-between">
                                <div >
                                    <h3 className="text-base font-medium text-gray-700 mb-2">{stat.title}</h3>
                                    <p className={`text-3xl font-semibold ${stat.textColor}`}>{stat.value}</p>
                                </div>
                                <div className="text-3xl opacity-30">
                                    {stat.icon}
                                </div>
                            </div>
                        </div>
                    ))}
                </div>

                {/* Setup Guide */}
                <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                    <div className="bg-orange-600 p-4 text-white">
                        <div className="flex items-center space-x-3">
                            <div className="w-10 h-10 bg-white bg-opacity-20 rounded-lg flex items-center justify-center">
                                <span className="text-lg">üöÄ</span>
                            </div>
                            <div>
                                <h2 className="text-xl font-semibold">B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng</h2>
                                <p className="text-orange-100 text-sm">H∆∞·ªõng d·∫´n thi·∫øt l·∫≠p h·ªá th·ªëng Multi-Tenant Chatbot Platform</p>
                            </div>
                        </div>
                    </div>

                    <div className="p-4">
                        <p className="text-gray-600 mb-4">
                            Ch·ªâ c·∫ßn 5 b∆∞·ªõc ƒë∆°n gi·∫£n ƒë·ªÉ chatbot c·ªßa b·∫°n s·∫µn s√†ng thu th·∫≠p v√† chƒÉm s√≥c kh√°ch h√†ng:
                        </p>

                        <div className="space-y-3">
                            {setupSteps.map((step, index) => (
                                <div key={index} className={`transition-colors cursor-pointer ${step.completed
                                    ? 'bg-green-50 border border-green-200 hover:bg-green-100'
                                    : 'bg-gray-50 border border-gray-200 hover:bg-gray-100'
                                    } rounded-lg overflow-hidden`}>
                                    {/* Main Step Content */}
                                    <div className="flex items-start space-x-4 p-4">
                                        <div className={`flex-shrink-0 w-7 h-7 rounded-full flex items-center justify-center text-sm font-medium ${step.completed
                                            ? 'bg-green-500 text-white'
                                            : 'bg-gray-300 text-gray-600'
                                            }`}>
                                            {step.completed ? '‚úì' : step.step}
                                        </div>

                                        <div className="flex items-center space-x-3 flex-1">
                                            <div className={`p-2 rounded-lg ${step.completed
                                                ? 'bg-green-100 text-green-600'
                                                : 'bg-gray-100 text-gray-600'
                                                }`}>
                                                {step.icon}
                                            </div>

                                            <div className="flex-1">
                                                <h3 className={`text-base font-medium ${step.completed
                                                    ? 'text-green-800'
                                                    : 'text-gray-700'
                                                    }`}>
                                                    {step.title}
                                                </h3>
                                            </div>
                                        </div>
                                    </div>

                                    {/* Task List */}
                                    <div className="px-4 pb-4">
                                        <div className="ml-11 pl-4 border-l border-gray-200">
                                            <p className="text-sm text-gray-600 mb-2 font-medium">Nhi·ªám v·ª• c·∫ßn th·ª±c hi·ªán:</p>
                                            <ul className="space-y-1">
                                                {step.tasks.map((task, taskIndex) => (
                                                    <li key={taskIndex} className="text-sm text-gray-600 flex items-start space-x-2">
                                                        <span className="w-1 h-1 bg-gray-400 rounded-full flex-shrink-0 mt-2"></span>
                                                        <span>{task}</span>
                                                    </li>
                                                ))}
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Dashboard;